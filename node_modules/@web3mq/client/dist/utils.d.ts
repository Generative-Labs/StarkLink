import type { Client } from './client';
import { EnvTypes } from './types';
export { userLoginRequest, getUserInfoRequest, getUserPublicProfileRequest, getPublicFollowerListRequest, getPublicFollowingListRequest, } from './api';
export declare const ByteArrayToHexString: (byteArray: Iterable<unknown> | ArrayLike<unknown>) => string;
export declare const GetContactBytes: (command: any, bytes: Uint8Array) => Uint8Array;
export declare const GenerateEd25519KeyPair: () => Promise<{
    PrivateKey: string;
    PublicKey: string;
}>;
export declare const sha256: (data: string | Uint8Array) => Uint8Array;
export declare const DownloadKeyPair: (text: string, filename?: string) => void;
export declare const GenerateRandomSixCode: () => string;
export declare const getDataSignature: (PrivateKey: string, signContent: string) => Promise<string>;
export declare const getCurrentDate: () => string;
export declare const selectUrl: (url: string, type?: string) => string;
export declare const getAllDomainList: (env: EnvTypes) => Promise<{
    time: number;
    url: any;
    serverRate: string;
    nodeId: string;
}[]>;
export declare const getFastestUrl: (env?: EnvTypes) => Promise<any>;
export declare const renderMessagesList: (msglist: any) => Promise<any>;
export declare const getGroupId: (msg: any, client: Client) => string;
export declare const renderMessage: (pbType: number, msg: {
    messageId: string;
    timestamp: bigint;
    payload?: any;
}, client: Client) => any;
export declare const transformAddress: (walletAddress: string) => Promise<any>;
export declare const saveMessageUpdateDate: () => void;
export declare const getMessageUpdateDate: () => number;
export declare const updateMessageLoadStatus: (msgList: Array<any>, msg: any, status?: string) => any[];
export declare function newDateFormat(time: number, format?: string): string;
