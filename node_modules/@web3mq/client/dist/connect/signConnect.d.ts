import { GetUserInfoParams, SignConnectOptions, SignClientCallBackType, KeyPairsType, WalletUserInfoType } from '../types';
export declare class SignConnect {
    private _options;
    private timeout;
    private timeoutObj;
    ws: WebSocket | null;
    wsUrl: string;
    nodeId: string;
    walletUserInfo: WalletUserInfoType | null;
    tempKeys: Omit<KeyPairsType, 'userid'> | null;
    tempCode: string;
    shareKey: string;
    AesKey: string;
    AesIv: string;
    callback: (params: SignClientCallBackType) => void;
    constructor(options: SignConnectOptions, callback: (params: SignClientCallBackType) => void);
    private getWalletUserInfo;
    private handleExchangeKey;
    private handleGetEncryptData;
    init(): void;
    onMessageCallback(PbType: number, bytes: Uint8Array): Promise<void>;
    send(arr: Uint8Array): void;
    sendDappBridge: (options: Omit<GetUserInfoParams, 'timestamp'>) => Promise<void>;
    sendPing(): void;
    reset(): void;
    start(): void;
    receive(pbType: number, bytes?: Uint8Array): void;
}
