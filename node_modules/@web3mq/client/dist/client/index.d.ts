import { Register } from '../register';
import { Channel } from '../channel';
import { Connect, SignConnect, DappConnect } from '../connect';
import { Message } from '../message';
import { User } from '../user';
import { Contact } from '../contact';
import { Notify } from '../notify';
import { Topic } from '../topic';
import { Storage } from '../storage';
import event from '../core/eventEmitter';
import { KeyPairsType, ClientKeyPaires, EventTypes, InitOptions, SendTempConnectOptions, SignClientCallBackType, Web3MQBridgeOptions } from '../types';
export declare class Client {
    private static _instance;
    static wsUrl: string;
    static register: Register;
    static signClient: SignConnect;
    static dappConnectClient: DappConnect;
    keys: ClientKeyPaires;
    channel: Channel;
    listeners: event;
    connect: Connect;
    message: Message;
    user: User;
    contact: Contact;
    notify: Notify;
    topic: Topic;
    storage: Storage;
    constructor(keys: KeyPairsType);
    static init: (initOptions?: InitOptions) => Promise<any>;
    static getInstance: (keys: KeyPairsType) => Client;
    static getSignClient: (options: SendTempConnectOptions, callback: (params: SignClientCallBackType) => void) => void;
    static initDappConnectClient: (options: Omit<Web3MQBridgeOptions, 'wsUrl'>, callback: (params: SignClientCallBackType) => void) => void;
    on: (eventName: EventTypes, callback: any) => void;
    emit: (eventName: EventTypes, data: {
        type: EventTypes;
        data?: any;
    }) => void;
    off: (eventName: EventTypes, callback?: any) => void;
    once: (eventName: EventTypes, callback: any) => void;
}
