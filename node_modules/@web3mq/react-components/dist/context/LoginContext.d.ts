import React, { Dispatch, PropsWithChildren, SetStateAction } from 'react';
import type { WalletType } from '@web3mq/client';
import type { LoginEventDataType } from '../components/LoginModal/hooks/useLogin';
export declare enum StepStringEnum {
    HOME = "home",
    VIEW_ALL = "view_all_desktop",
    LOGIN = "login",
    QR_CODE = "qr_code",
    SIGN_UP = "sign_up",
    CONNECT_LOADING = "connect_loading",
    CONNECT_ERROR = "connect_error",
    LOGIN_SIGN_LOADING = "login_sign_loading",
    LOGIN_SIGN_ERROR = "login_sign_error",
    SIGN_UP_SIGN_LOADING = "sign_up_sign_loading",
    SIGN_UP_SIGN_ERROR = "sign_up_sign_error"
}
export declare enum SignAuditTypeEnum {
    GET_KEYS_FOR_LOGIN = "get_Keys_For_Login",
    GET_KEYS_FOR_REGISTER = "get_keys_For_Register",
    REGISTER = "register"
}
export declare type LoginContextValue = {
    login: (walletType?: WalletType) => Promise<void>;
    register: (walletType?: WalletType) => Promise<void>;
    getAccount: (walletType?: WalletType, address?: string) => Promise<any>;
    showLoading: boolean;
    setShowLoading: Dispatch<SetStateAction<boolean>>;
    step: string;
    setStep: Dispatch<SetStateAction<StepStringEnum>>;
    walletType: WalletType;
    setWalletType: Dispatch<SetStateAction<WalletType>>;
    styles?: Record<string, any> | null;
    handleLoginEvent: (eventData: LoginEventDataType) => void;
    handleWeb3mqCallback: any;
    qrCodeUrl: any;
    userAccount: any;
    setMainKeys: any;
    loginByQrCode: any;
    registerByQrCode: any;
    confirmPassword: React.MutableRefObject<string>;
};
export declare const LoginContext: React.Context<LoginContextValue | undefined>;
export declare const LoginProvider: ({ children, value, }: React.PropsWithChildren<{
    value: LoginContextValue;
}>) => JSX.Element;
export declare const useLoginContext: (componentName?: string | undefined) => LoginContextValue;
