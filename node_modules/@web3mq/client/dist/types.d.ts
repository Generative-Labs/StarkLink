import { EVENT_MAP } from './core/events';
export declare type EventTypes = 'all' | keyof typeof EVENT_MAP;
export declare type ServiceResponse = {
    data: any;
    msg: string;
    code: number;
};
export declare type PageParams = {
    page?: number;
    size?: number;
};
export declare type Web3MQDBValuePayload = {
    [key: string]: any;
};
export declare type DappConnectSignParams = {
    signContent: string;
    didValue: string;
    signType: string;
};
export declare type Web3MQDBValue = {
    messageId: string;
    from: string;
    contentTopic: string;
    timestamp: number;
    unread: number;
    lastMessage: string;
    updatedAt: string;
    payload: Web3MQDBValuePayload;
};
export declare type KeyPairsType = {
    PrivateKey: string;
    PublicKey: string;
    userid: string;
};
export declare type EthAccountType = {
    address: string;
    balance: number;
    shortAddress: string;
};
export declare type RegisterBySignParams = {
    userid: string;
    didValue: string;
    mainPublicKey: string;
    signature: string;
    did_pubkey?: string;
    didType?: WalletType;
    signContentURI?: string;
    nickname?: string;
    avatar_url?: string;
    avatar_base64?: string;
};
export declare type LoginByKeysParams = {
    mainPrivateKey: string;
    mainPublicKey: string;
    didType: WalletType;
    didValue: string;
    userid: string;
    password: string;
    pubkeyExpiredTimestamp?: number;
};
export declare type RegisterMetaMaskParams = {
    password: string;
    userid: string;
    did_value: string;
    did_type?: WalletType;
    signContentURI?: string;
    nickname?: string;
    avatar_url?: string;
    avatar_base64?: string;
};
export declare type SignMetaMaskParams = {
    password: string;
    userid: string;
    did_value: string;
    did_type?: WalletType;
    mainPrivateKey?: string;
    mainPublicKey?: string;
    pubkeyExpiredTimestamp?: number;
};
export declare type NewLoginApiParams = {
    password: string;
    userid: string;
    did_value: string;
    did_type?: WalletType;
    mainPrivateKey?: string;
    mainPublicKey?: string;
    pubkeyExpiredTimestamp?: number;
};
export declare type InitOptions = {
    connectUrl?: string | null;
    app_key?: string;
    env?: EnvTypes;
    tempPubkey?: string;
    didKey?: string;
};
export declare type SignClientCallBackType = {
    type: 'createQrcode' | 'connect' | 'messageStatus' | 'keys' | 'dapp-connect';
    data: any;
};
export declare type WalletUserInfoType = {
    did_signature: string;
    did_type: string;
    did_value: string;
    pubkey: string;
    pubkey_type: string;
    signature_content: string;
    timestamp: number;
    userid: string;
    wallet_address: string;
    wallet_type: string;
};
export declare type SendTempConnectOptions = {
    dAppID: string;
    topicID: string;
    signatureTimestamp: number;
    dAppSignature: string;
};
export declare type SendWeb3MQBridgeOptions = {
    dAppID: string;
    topicID: string;
    nodeID: string;
    signatureTimestamp?: number;
    dAppSignature?: string;
};
export declare type GetUserInfoParams = {
    did_type: string;
    did_value: string;
    timestamp: number;
};
export declare type GetUserInfoResponse = {
    userid: string;
    userExist: boolean;
};
export declare type GetMainKeypairParams = {
    password: string;
    did_type: WalletType;
    did_value: string;
};
export interface SignConnectOptions extends SendTempConnectOptions {
    wsUrl: string;
}
export interface Web3MQBridgeOptions {
    wsUrl: string;
    dAppID: string;
    nodeID?: string;
}
export declare type EnvTypes = 'dev' | 'test';
export interface ClientKeyPaires extends KeyPairsType {
    userid: string;
}
export declare type RegisterParams = {
    userid: string;
    did_type: string;
    did_value: string;
    did_signature: string;
    pubkey_type: string;
    pubkey_value: string;
    signature_content: string;
    timestamp: number;
    nickname?: string;
    avatar_base64?: string;
    avatar_url?: string;
    testnet_access_key?: string;
    did_pubkey?: string;
};
export declare type RegisterApiResponse = {
    did_type: string;
    did_value: string;
    userid: string;
};
export declare type LoginResponse = {
    tempPrivateKey: string;
    tempPublicKey: string;
    mainPrivateKey: string;
    mainPublicKey: string;
    pubkeyExpiredTimestamp: number;
};
export declare type QrCodeRegisterParams = {
    userid: string;
    signature: string;
    did_pubkey?: string;
    nickname?: string;
    avatar_url?: string;
    avatar_base64?: string;
};
export declare type LoginApiParams = {
    userid: string;
    did_type: string;
    did_value: string;
    login_signature: string;
    signature_content: string;
    main_pubkey: string;
    pubkey_value: string;
    pubkey_type: string;
    timestamp: number;
    pubkey_expired_timestamp: number;
};
export declare type QrCodeLoginApiParams = {
    userid: string;
    did_type: string;
    did_value: string;
    mainPrivateKey: string;
    mainPublicKey: string;
    password?: string;
    pubkeyExpiredTimestamp?: number;
};
export declare type BaseParams = {
    userid: string;
    web3mq_signature: string;
    timestamp: number;
};
export declare type NewBaseParams = {
    userid: string;
    web3mq_user_signature: string;
    timestamp: number;
};
export declare type WalletBaseParams = {
    userid: string;
    did_pubkey?: string;
    did_signature: string;
    sign_content: string;
    timestamp: number;
};
export declare type GroupPermissions = {
    [key: string]: {
        type: string;
        value: 'ceator_invite_friends' | 'public' | 'nft_validation';
    };
};
export interface CreateRoomParams extends BaseParams {
    group_name?: string;
    groupid?: string;
    avatar_url?: string;
    avatar_base64?: string;
    permissions?: GroupPermissions;
}
export interface CommonGetListParams extends BaseParams, PageParams {
}
export interface NewCommonGetListParams extends NewBaseParams, PageParams {
}
export declare type ActiveChannelType = {
    avatar_base64: string;
    avatar_url: string;
    chat_name: string;
    chat_type: string;
    chatid: string;
    updatedAt?: string;
    unread?: number;
    lastMessage?: string;
};
export interface UpdateRoomListParams extends BaseParams {
    chatid: string;
    chat_type: string;
    topic: string;
    topic_type: string;
}
export interface GetMessageListParams extends BaseParams, PageParams {
    topic: string;
}
export interface GetGroupMemberListParams extends BaseParams, PageParams {
    groupid: string;
}
export interface InviteGroupMemberParams extends BaseParams {
    groupid: string;
    members: string[];
}
export interface JoinGroupParams extends NewBaseParams {
    groupid: string;
}
export interface UpdateGroupPermissionsParams extends NewBaseParams {
    groupid: string;
    permissions: GroupPermissions;
}
export interface GetGroupPermissionsParams extends NewBaseParams {
    groupid: string;
}
export declare type MessageStatus = 'delivered' | 'read';
export interface ChangeMessageStatusParams extends BaseParams {
    topic: string;
    messages: string[];
    status: MessageStatus;
}
export interface SyncNewMessagesParams {
    sync_timestamp: number;
    timestamp: number;
    userid: string;
    web3mq_user_signature: string;
}
export declare type MessageListItem = {
    cipher_suite: string;
    from: string;
    topic: string;
    from_sign: string;
    messageid: string;
    payload_type: string;
    timestamp: number;
    message_status: {
        status: MessageStatus;
        timestamp: number;
    };
    payload: string;
    version: number;
};
export interface SearchParams extends BaseParams {
    keyword: string;
}
export interface ProfileParams extends BaseParams {
    nickname: string;
    avatar_url: string;
}
export interface SendFriendParams extends BaseParams {
    content: string;
    target_userid: string;
}
export interface GetUserBindDidsParams extends BaseParams {
}
export interface UserBindDidParams extends BaseParams {
    provider_id: string;
    did_type: string;
    did_value: string;
    did_action?: string;
    did_content?: string;
}
export declare type UserBindDidIdsResponse = Pick<UserBindDidParams, 'did_type' | 'did_value' | 'provider_id'> & {
    metadata: any;
};
export interface FollowOperationParams extends WalletBaseParams {
    address: string;
    target_userid: string;
    action: 'follow' | 'cancel';
    did_type: WalletType;
}
export interface GetFollowerListParams extends NewBaseParams, PageParams {
}
export interface GetUserPublicProfileParams {
    did_type: string;
    did_value: string;
    timestamp: number;
    my_userid: string;
}
export interface GetPublicFollowerListParams extends PageParams {
    userid: string;
    timestamp: number;
}
export interface PublishNotificationToFollowersParams extends NewBaseParams {
    title: string;
    content: string;
}
export interface GetTargetUserPermissionsParams extends NewBaseParams {
    target_userid: string;
}
export declare type UserPermissionsType = Record<string, {
    type: string;
    value: boolean;
}>;
export interface UpdateUserPermissionsParams extends NewBaseParams {
    permissions: UserPermissionsType;
}
export declare type ActionType = 'agree';
export interface OperationFriendParams extends BaseParams {
    target_userid: string;
    action: ActionType;
}
export declare type FollowStatus = 'following' | 'follower' | 'follow_each';
export declare type ContactListItemType = {
    avatar_url: string;
    follow_status: FollowStatus;
    nickname: string;
    permissions: UserPermissionsType;
    userid: string;
    wallet_address: string;
    wallet_type: WalletType;
};
export declare type SearchUsersResponse = {
    avatar_url: string;
    nickname: string;
    userid: string;
    wallet_address: string;
    wallet_type: string;
};
export declare type UpdateMyProfileResponse = {
    userid: string;
    wallet_address: string;
    wallet_type: string;
    nickname: string;
    avatar_url: string;
};
export interface ChangeNotificationStatusParams extends BaseParams {
    messages: string[];
    status: MessageStatus;
}
export declare type NotifyResponse = {
    come_from?: string;
    title: string;
    content: string;
    type: string;
    version: number;
    timestamp: number;
};
export interface CreateTopicParams extends BaseParams {
    topic_name: string;
}
export interface SubscribeTopicParams extends BaseParams {
    topicid: string;
}
export interface PublishTopicMessageParams extends SubscribeTopicParams {
    title: string;
    content: string;
}
export interface GetTopicListParams extends PageParams, BaseParams {
}
export declare type SubscribeListType = {
    topicid: string;
    create_at: number;
};
export interface TopicListType extends SubscribeListType {
    topic_name: string;
}
export declare type WalletType = 'eth' | 'starknet' | 'qrcode';
export declare type WalletSignRes = {
    sign: string;
    publicKey?: string;
};
export declare type GetSignContentResponse = {
    signContent: string;
};
export declare type GetRegisterSignContentParams = {
    userid: string;
    mainPublicKey: string;
    didType: WalletType;
    didValue: string;
    signContentURI?: string;
};
export declare type MainKeypairType = {
    publicKey: string;
    secretKey: string;
};
export declare type ResetPasswordParams = {
    userid: string;
    didValue: string;
    mainPublicKey: string;
    signature: string;
    did_pubkey?: string;
    didType?: WalletType;
    signContentURI?: string;
    nickname?: string;
    avatar_url?: string;
};
export declare type ResetPasswordResponse = {
    mainPrivateKey: string;
    mainPublicKey: string;
};
export declare const WalletNameMap: {
    eth: string;
    starknet: string;
    qrcode: string;
};
export declare const SendMsgLoadingMap: {
    success: string;
    error: string;
    loading: string;
};
