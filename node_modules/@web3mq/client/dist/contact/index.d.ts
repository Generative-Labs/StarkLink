import { Client } from '../client';
import { ActionType, ContactListItemType, FollowOperationParams, PageParams, PublishNotificationToFollowersParams, ServiceResponse } from '../types';
export declare class Contact {
    private readonly _client;
    private readonly _keys;
    contactList: ContactListItemType[] | null;
    followerList: ContactListItemType[] | null;
    followingList: ContactListItemType[] | null;
    myFriendRequestList: ContactListItemType[] | null;
    receiveFriendRequestList: ContactListItemType[] | null;
    constructor(client: Client);
    /**
     * @deprecated
     */
    searchContact(walletAddress: string): Promise<import("axios").AxiosResponse<any, any>>;
    getContactList(option: PageParams): Promise<ContactListItemType[]>;
    getFollowerList(option: PageParams): Promise<ContactListItemType[]>;
    getFollowingList(option: PageParams): Promise<ContactListItemType[]>;
    sendFriend(target_id: string, content?: string): Promise<ServiceResponse>;
    followOperation(params: Pick<FollowOperationParams, 'address' | 'target_userid' | 'action' | 'did_type'>): Promise<ServiceResponse>;
    publishNotificationToFollowers(params: Pick<PublishNotificationToFollowersParams, 'title' | 'content'>): Promise<ServiceResponse>;
    /**
    * @deprecated
    */
    getMyFriendRequestList(option: PageParams): Promise<void>;
    /**
    * @deprecated
    */
    getReceiveFriendRequestList(option: PageParams): Promise<void>;
    /**
    * @deprecated
    */
    operationFriend(target_userid: string, action?: ActionType): Promise<import("axios").AxiosResponse<any, any>>;
}
