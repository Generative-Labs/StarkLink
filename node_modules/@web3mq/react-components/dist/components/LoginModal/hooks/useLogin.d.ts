/// <reference types="react" />
import { WalletType } from '@web3mq/client';
import { SignAuditTypeEnum } from '../../../context';
export declare type LoginEventType = 'login' | 'register' | 'error';
export declare type LoginEventDataType = {
    type: LoginEventType;
    msg: string;
    data: LoginResType | RegisterResType | null;
};
export declare type MainKeysType = {
    publicKey: string;
    privateKey: string;
    walletAddress: string;
};
export declare type UserAccountType = {
    userid: string;
    address: string;
    walletType: WalletType;
    userExist: boolean;
};
export declare type LoginResType = {
    privateKey: string;
    publicKey: string;
    tempPrivateKey: string;
    tempPublicKey: string;
    didKey: string;
    userid: string;
    address: string;
    pubkeyExpiredTimestamp: number;
};
export declare type RegisterResType = {
    privateKey: string;
    publicKey: string;
    address: string;
};
declare const useLogin: (handleLoginEvent: (eventData: LoginEventDataType) => void, keys?: MainKeysType | undefined, account?: UserAccountType | undefined) => {
    login: (didType?: WalletType) => Promise<void>;
    getUserAccount: (didType?: WalletType, address?: string | undefined) => Promise<{
        address: string;
        userExist: boolean;
    }>;
    register: (didType?: WalletType, nickname?: string | undefined) => Promise<void>;
    userAccount: UserAccountType | undefined;
    loginByQrCode: () => Promise<void>;
    setMainKeys: import("react").Dispatch<import("react").SetStateAction<MainKeysType | undefined>>;
    registerByQrCode: (signature?: string | undefined) => Promise<void>;
    web3MqSignCallback: (signature: string, signType: SignAuditTypeEnum) => Promise<void>;
    setUserAccount: import("react").Dispatch<import("react").SetStateAction<UserAccountType | undefined>>;
    confirmPassword: import("react").MutableRefObject<string>;
};
export default useLogin;
