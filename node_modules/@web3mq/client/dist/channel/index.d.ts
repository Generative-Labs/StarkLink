import { Client } from '../client';
import { PageParams, ActiveChannelType, CreateRoomParams, ServiceResponse, UpdateRoomListParams, UpdateGroupPermissionsParams } from '../types';
import { Web3MQMessageStatusResp, Web3MQRequestMessage } from '../pb';
export declare class Channel {
    private readonly _client;
    private readonly _keys;
    channelList: ActiveChannelType[] | null;
    activeChannel: ActiveChannelType | null;
    constructor(client: Client);
    private handleUpdateChannel;
    private syncNewMessages;
    handleUnread(resp: Web3MQRequestMessage | Web3MQMessageStatusResp, msg: any): Promise<void>;
    setActiveChannel(channel: ActiveChannelType | null): Promise<void>;
    queryChannels(option: PageParams): Promise<void>;
    updateChannels(params: Pick<UpdateRoomListParams, 'chatid' | 'chat_type' | 'topic' | 'topic_type'>): Promise<ServiceResponse>;
    createRoom(params: Pick<CreateRoomParams, 'group_name' | 'groupid' | 'avatar_url' | 'avatar_base64' | 'permissions'>): Promise<void>;
    getGroupMemberList(option: PageParams): Promise<import("axios").AxiosResponse<any, any> | undefined>;
    inviteGroupMember(members: string[]): Promise<import("axios").AxiosResponse<any, any> | undefined>;
    joinGroup(groupid: string): Promise<void>;
    getGroupPermissions(groupid: string): Promise<import("axios").AxiosResponse<any, any>>;
    updateGroupPermissions(params: Pick<UpdateGroupPermissionsParams, 'groupid' | 'permissions'>): Promise<import("axios").AxiosResponse<any, any>>;
}
