import { EthAccountType, GetMainKeypairParams, GetUserInfoParams, LoginByKeysParams, RegisterBySignParams, WalletSignRes, WalletType, LoginResponse, GetUserInfoResponse, GetSignContentResponse, GetRegisterSignContentParams, MainKeypairType, ResetPasswordParams } from '../types';
export declare class Register {
    appKey: string;
    pubicKeyType: string;
    registerTime: number;
    registerSignContent: string;
    constructor(appKey?: string);
    getUserInfo: (options: Omit<GetUserInfoParams, 'timestamp'>) => Promise<GetUserInfoResponse>;
    getMainKeypair: (options: GetMainKeypairParams) => Promise<{
        publicKey: string;
        secretKey: string;
    }>;
    register: (options: RegisterBySignParams) => Promise<import("../types").RegisterApiResponse>;
    login: (options: LoginByKeysParams) => Promise<LoginResponse>;
    resetPassword: (options: ResetPasswordParams) => Promise<import("axios").AxiosResponse<any, any>>;
    sign: (signContent: string, address: string, walletType: WalletType) => Promise<WalletSignRes>;
    getAccount: (walletType: WalletType) => Promise<EthAccountType>;
    getMainKeypairSignContent: (options: GetMainKeypairParams) => Promise<GetSignContentResponse>;
    getMainKeypairBySignature: (signature: string, password: string) => Promise<MainKeypairType>;
    getRegisterSignContent: (options: GetRegisterSignContentParams) => Promise<GetSignContentResponse>;
}
